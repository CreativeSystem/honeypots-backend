datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String  @id @default(uuid()) @db.Char(36)
  name  String  @db.VarChar(100)
  email  String  @db.VarChar(100) @unique
  facebookId  String? @map("facebook_id")  @db.VarChar(100)
  googleId  String? @map("google_id")  @db.VarChar(100)
  passwordHash  String? @map("password_hash")  @db.VarChar(100)
  picture  String? @map("picture_url")  @db.VarChar(255)
  birthDate DateTime? @map("birth_date")
  
  recipes Recipe[]
  recipeActions RecipeAction[] 

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@map("users")
}

model Recipe {
  id    String  @id @default(uuid()) @db.Char(36)
  name  String  @db.VarChar(100)
  description String @db.VarChar(255)
  preparationTime Int @map("preparation_time")
  
  owner User @relation(fields: [ownerId], references: [id])
  ownerId String @map("owner_id") @db.Char(36)
  
  recipeActions RecipeAction[]
  categories Category[] @relation("RecipeCategory",references: [id])
  images RecipeImage[]
  sections RecipeSection[]

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@map("recipes")
}

model RecipeImage{
  id    String  @id @default(uuid()) @db.Char(36)

  recipe Recipe @relation(fields: [recipeId], references: [id])
  recipeId String @map("recipe_id") @db.Char(36)

  createdAt        DateTime           @default(now())

  @@map("recipe_images")
}

model RecipeSection{
  id    String  @id @default(uuid()) @db.Char(36)
  name String
  order Int

  recipe Recipe @relation(fields: [recipeId], references: [id])
  recipeId String @map("recipe_id") @db.Char(36)

  superSectionId String? @map("super_section_id") @db.Char(36)
  superSection RecipeSection? @relation("SectionHierarchy",fields: [superSectionId], references: [id])

  subSection RecipeSection? @relation("SectionHierarchy")

  directions RecipeDirections[]
  ingredients Ingredient[]

  @@map("recipe_sections")
}

model RecipeDirections {
  id    String  @id @default(uuid()) @db.Char(36)
  order Int
  description String

  section RecipeSection @relation(fields: [sectionId], references: [id])
  sectionId String @map("section_id") @db.Char(36)

  @@map("recipe_directions")
}

model Ingredient {
  id    String  @id @default(uuid()) @db.Char(36)
  order Int
  quantity Int
  unit String @db.VarChar(30)
  name String @db.VarChar(100)

  section RecipeSection @relation(fields: [sectionId], references: [id])
  sectionId String @map("section_id") @db.Char(36)

  @@map("ingredients")
}

enum ActionType{
  LIKE
  VIEW
}

model RecipeAction {
  type ActionType
  userId String @map("user_id") @db.Char(36)
  recipeId String @map("recipe_id") @db.Char(36)
  
  user User @relation(fields: [userId], references: [id])
  recipe Recipe @relation(fields: [recipeId], references: [id])
  
  createdAt        DateTime           @default(now())

  @@id([userId,recipeId,type])
  @@map("recipe_actions")
}

model Category{
  id    String  @id @default(uuid()) @db.Char(36)
  name  String  @db.VarChar(100)
  
  subCategories Category[] @relation("CategoryHierarchy",references: [id])
  superCategories Category[] @relation("CategoryHierarchy",references: [id])
  recipes Recipe[] @relation("RecipeCategory",references: [id])
  
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@map("categories")
}